AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Blood Bank Inventory & Request System (Serverless)

Globals:
  Function:
    Runtime: python3.9
    Timeout: 10
    MemorySize: 128

Resources:
  # ------------------------------------------------------------------
  # 1. DATABASE (DynamoDB)
  # ------------------------------------------------------------------
  BloodInventoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: BloodBankInventory
      AttributeDefinitions:
        - AttributeName: BloodType
          AttributeType: S
        - AttributeName: LocationID
          AttributeType: S
      KeySchema:
        - AttributeName: BloodType
          KeyType: HASH
        - AttributeName: LocationID
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # ------------------------------------------------------------------
  # 2. NOTIFICATION (SNS)
  # ------------------------------------------------------------------
  LowStockAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: LowStockAlertsTopic

  # ------------------------------------------------------------------
  # 3. BACKEND: UPDATE/ALERT Lambda (POST /inventory)
  # ------------------------------------------------------------------
  UpdateInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_inventory_and_alert.lambda_handler
      CodeUri: backend/ 
      Environment: # CRITICAL: Passes resource names to Python code
        Variables:
          DYNAMODB_TABLE_NAME: !Ref BloodInventoryTable
          SNS_TOPIC_ARN: !Ref LowStockAlertsTopic
      Policies: # Permissions to write to DB and publish to SNS
        - DynamoDBWritePolicy:
            TableName: !Ref BloodInventoryTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt LowStockAlertsTopic.TopicName # Uses TopicName for SAM build compatibility
      Events:
        Api:
          Type: Api
          Properties:
            Path: /inventory
            Method: POST
            RestApiId: !Ref BloodBankApiGateway 

  # ------------------------------------------------------------------
  # 4. BACKEND: READ STATUS Lambda (GET /status)
  # ------------------------------------------------------------------
  GetInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_inventory_status.lambda_handler
      CodeUri: backend/
      Environment: # CRITICAL: Passes resource names to Python code
        Variables:
          DYNAMODB_TABLE_NAME: !Ref BloodInventoryTable
          SNS_TOPIC_ARN: !Ref LowStockAlertsTopic
      Policies: # Read-only permission to DynamoDB
        - DynamoDBReadPolicy:
            TableName: !Ref BloodInventoryTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /status
            Method: GET
            RestApiId: !Ref BloodBankApiGateway 

  # ------------------------------------------------------------------
  # 5. API GATEWAY (Shared across functions)
  # ------------------------------------------------------------------
  BloodBankApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors: # Enables Cross-Origin Access for your S3 dashboard
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'" 

# ------------------------------------------------------------------
# OUTPUTS (Used by GitHub Actions to retrieve the URL)
# ------------------------------------------------------------------
Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for Dev stage"
    Value: !Sub "https://${BloodBankApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/"


